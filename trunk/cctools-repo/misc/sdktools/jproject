#!/system/bin/sh

TOPDIR=$PWD

if [ "$TOPDIR" = "" ]; then
    TOPDIR="."
fi

TOPDIR=`realpath $TOPDIR`

error() {
    echo "ERROR: $@"
    exit 1
}

usage_create() {
    echo
    echo "Options for create:"
    echo "-n --name                    - Project name. [required]"
    echo "-t --target                  - Target ID of the new project."
    echo "-p --path                    - The new project's directory. [required]"
    echo "-k --package                 - Android package name. [required]"
    echo
    
    exit 1
}

usage() {
    echo
    echo "Usage:"
    echo "create project [options]     - Creates a new Android project."
    echo "create lib-project [options] - Creates a new Android library project."
    echo "build [debug]                - Build a project."
    echo "build relese                 - Build a release project."
    echo "clean                        - Clean a project files."

    usage_create
}

if [ "$1" = "create" ]; then
    PROJECT_LIBRARY=
    if [ "$2" = "lib-project" ]; then
	PROJECT_LIBRARY="yes"
    elif [ ! "$2" = "project" ]; then
	usage
    fi

    shift 2

    USE_GUIBOX=
    O=`getopt -n jproject -l path:,package:,name:,target:,gui -o p:k:n:t:g -- "$@"` || exit 1
    eval set -- "$O"
    while true; do
	case "$1" in
	-p|--path)
	    PROJECT_PATH="$2"; shift 2;;
	-k|--package)
	    PROJECT_PACKAGE="$2"; shift 2;;
	-n|--name)
	    PROJECT_NAME="$2"; shift 2;;
	-t|--target)
	    PROJECT_TARGET="$2"; shift 2;;
	-g|--gui)
	    USE_GUIBOX=yes; shift;;
	--)
	    shift; break;;
	*)
	    echo Error; exit 1;;
	esac
    done

    if [ ! "$@" = "" ]; then
	echo "jproject: unrecognized options: $@"
	usage_create
    fi

    if [ "$PROJECT_PATH" = "" -o "$PROJECT_PACKAGE" = "" -o "$PROJECT_NAME" = "" ]; then
	if [ "$USE_GUIBOX" = "yes" ]; then
	    adialog --msgbox --title "Error!" --message "Cannot create a project" --text "Check project path, package or name."
	    exit 1
	else
	    usage_create
	fi
    fi

    if [ "$PROJECT_TARGET" = "" ]; then
	ANDROID_SDK_VER=`getprop ro.build.version.sdk`
    else
	ANDROID_SDK_VER=$PROJECT_TARGET
    fi
    ANDROID_SDK=${CCTOOLSDIR}/sdk/android-${ANDROID_SDK_VER}

    if [ ! -d $ANDROID_SDK ]; then
	#
	# FIXME: get available version from sdk directory
	#
	ANDROID_SDK_VER="19"
	ANDROID_SDK=${CCTOOLSDIR}/sdk/android-${ANDROID_SDK_VER}
    fi

    if [ ! -d $ANDROID_SDK ]; then
	if [ "$USE_GUIBOX" = "yes" ]; then
	    adialog --msgbox --title "Error!" --message "Cannot create a project" --text "No SDK Android-${ANDROID_SDK_VER} found."
	    exit 1
	else
	    echo "ERROR: No SDK Android-${ANDROID_SDK_VER} found!"
	    exit 1
	fi
    fi

    p="${PROJECT_PATH}/${PROJECT_NAME}"
    p1="${p}/src/`echo $PROJECT_PACKAGE | tr '.' '/'`"

    mkdir -p $p1

    cat > ${p1}/${PROJECT_NAME}.java << EOF
package ${PROJECT_PACKAGE};

public class ${PROJECT_NAME} {
    public static void main(String[] args) {
	System.out.println("Hello ${PROJECT_NAME}!");
    }
}
EOF

    cat > ${p}/project.properties << EOF
# This file is automatically generated by jproject.

name=${PROJECT_NAME}
package=${PROJECT_PACKAGE}
target=android-${ANDROID_SDK_VER}
EOF

    if [ "$PROJECT_LIBRARY" = "yes" ]; then
	echo "android.library=true" >> ${p}/project.properties
    fi

    if [ "$USE_GUIBOX" = "yes" ]; then
	adialog --msgbox --title "Congratulation!" --message "New project created!" --text "Project path is ${p}."
    fi
    exit 0
fi

get_ext_libdirs() {
    for f in project.properties default.properties; do
	if [ -e ${TOPDIR}/$f ]; then
	    cat ${TOPDIR}/$f | grep android.library.reference | cut -f2 -d=
	    break
	fi
    done
}

is_library() {
    for f in project.properties default.properties; do
	if [ -e ${TOPDIR}/$f ]; then
	    cat ${TOPDIR}/$f | grep android.library | head -n1 | cut -f2 -d=
	    break
	fi
    done
}

get_android_sdk() {
    for f in project.properties default.properties; do
	if [ -e ${TOPDIR}/$f ]; then
	    cat ${TOPDIR}/$f | grep ^target | head -n1 | cut -f2 -d= | cut -f2 -d-
	    break
	fi
    done
}

check_properties() {
    if [ ! -f project.properties -a ! -f default.properties ]; then
	echo "ERROR: No properties file found"
	exit 1
    fi
}

get_properties() {
    for f in project.properties default.properties; do
	if [ -e ${TOPDIR}/$f ]; then
	    cat ${TOPDIR}/$f | grep ^${1} | head -n1 | cut -f2 -d=
	    break
	fi
    done
}

PROJECTNAME=`aproject-helper AppName 2>/dev/null`
if [ "$PROJECTNAME" = "" ]; then
    PROJECTNAME=`basename $TOPDIR`
fi

APROJECT_BIN=`realpath $0`

VERBOSE_JAVAC=
VERBOSE_JAR=
VERBOSE_DEX=
VERBOSE_APKBUILDER=
VERBOSE_AAPT=

if [ "$1" = "-v" ]; then
    VERBOSE_JAVAC="-verbose"
    VERBOSE_JAR="v"
    VERBOSE_DEX="--verbose"
    VERBOSE_APKBUILDER="-v"
    VERBOSE_AAPT="-v"
    shift
fi

if [ "$1" = "clean" ]; then
    check_properties
    echo "Cleaning $PROJECTNAME"
    rm -rf bin gen
    for d in `get_ext_libdirs`; do
	cd $d && $APROJECT_BIN $VERBOSE_AAPT clean
	cd $TOPDIR
    done
    exit 0
fi

if [ "$1" = "run" ]; then
    shift
    exec dalvikvm -Xss262912 -Xmx256M -cp bin/${PROJECTNAME}.dex `get_properties package`.`get_properties name` $@
fi

if [ ! "$1" = "build" ]; then
    usage
fi

shift

for d in `get_ext_libdirs`; do
    cd $d
    $APROJECT_BIN $VERBOSE_AAPT build $@ || error "external library"
    cd $TOPDIR
done

echo "Build $PROJECTNAME"

PROJECT_RELEASE="no"
if [ "$1" = "release" ]; then
    PROJECT_RELEASE="yes"
fi

mkdir -p bin/classes gen
mkdir -p bin/res

ANDROID_SDK_VER=`get_android_sdk`
if [ "$ANDROID_SDK_VER" = "" ]; then
    ANDROID_SDK_VER=`aproject-helper MinSDK`
fi

if [ "$ANDROID_SDK_VER" = "" ]; then
    echo "WARNING: No SDK version found in AndroidManifest.xml!"
    ANDROID_SDK_VER=`getprop ro.build.version.sdk`
    echo "WARNING: Use OS defined version $ANDROID_SDK_VER"
fi

ANDROID_SDK=${CCTOOLSDIR}/sdk/android-${ANDROID_SDK_VER}

if [ ! -d $ANDROID_SDK ]; then
    echo "ERROR: No SDK Android-${ANDROID_SDK_VER} found!"
    exit 1
fi

find_libs_for_aapt() {
    local d=
    for d in $@; do
	test -d $d && find $d -name "*.jar" -type f -exec printf "-I {} " \;
    done
}

find_aidl_for_aidl() {
    local d=
    for d in $@; do
	test -d $d && find $d -name "*.aidl" -type f -exec printf "-p{} " \;
    done
}

find_libs_for_javac() {
    local d=
    local x=
    for d in $@; do
	test -d $d && find $d -name "*.jar" -type f -exec printf "{}:" \;
    done
}

find_libs_for_dex() {
    local d=
    local x=
    for d in $@; do
	test -d $d && find $d -name "*.jar" -type f -exec printf "{} " \;
    done
}

get_ext_resources() {
    local d
    for d in $@; do
	printf "-S ${d}/bin/res -S ${d}/res "
    done
}

find_ext_libs_for_javac() {
    local d
    for d in $@; do
	find_libs_for_javac ${d}/bin ${d}/libs
    done
}

find_ext_libs_for_dex() {
    local d
    for d in $@; do
	find_libs_for_dex ${d}/bin ${d}/libs
    done
}

echo "Starting aidl..."

find . -name "*.aidl" -exec aidl -Isrc `find_aidl_for_aidl $ANDROID_SDK $ANDROID_AIDL` -ogen {} \;

echo "Starting javac..."

javac $VERBOSE_JAVAC \
    -d ${TOPDIR}/bin/classes \
    -classpath ${TOPDIR}/bin/classes:`find_ext_libs_for_javac $EXT_LIBDIRS`:`find_libs_for_javac $ANDROID_SDK libs $ANDROID_LIBS` \
    -sourcepath ${TOPDIR}/src:${TOPDIR}/gen \
    -target 1.5 \
    -bootclasspath ${ANDROID_SDK}/android.jar \
    -encoding UTF-8 \
    -source 1.5 \
    `find src -name "*.java"` \
    `find gen -name "*.java"` \
    || error "javac"

IS_LIBRARY=`is_library`

if [ "$IS_LIBRARY" = "true" ]; then

    echo "Build library..."

    jar c${VERBOSE_JAR}f bin/${PROJECTNAME}.jar -C bin/classes .
else

    mkdir -p ${TOPDIR}/bin/dexedLibs
    DEX_LIBS=
    DEXED_LIBS=
    for f in `find_ext_libs_for_dex $EXT_LIBDIRS` `find_libs_for_dex libs`; do
	for v in $DEX_LIBS; do
	    if cmp -s $f $v; then
		f=""
		break
	    fi
	done
	if [ ! "$f" = "" ]; then
	    DEX_LIBS="$DEX_LIBS $f"
	    fname=`basename $f`
	    
	    echo "Pre-dexing library ${fname}..."
	    
	    dx --dex \
		$VERBOSE_DEX \
		--output ${TOPDIR}/bin/dexedLibs/${fname} \
		$f \
		|| error "dx"
	    DEXED_LIBS="$DEXED_LIBS ${TOPDIR}/bin/dexedLibs/${fname}"
	fi
    done

    echo "Starting dx..."

    dx --dex \
	$VERBOSE_DEX \
	--no-strict \
	--output=bin/${PROJECTNAME}.dex \
	`find bin/classes -maxdepth 1 -not -path "bin/classes"` \
	$DEXED_LIBS \
	|| error "dx"
fi
